#! /usr/bin/expect
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# List all dynamically linked binaries in AT's directory and call
# check_lib_dependencies

source shared.exp
source config_parser.exp
set rc 0

# Check if the variables are already defined on environment before parsing
# the config file
set x [catch {set at_dir $env(AT_DEST)}]
if { $x != 0 } {
	array set config [ config_parser $argv ]
	set at_dir $config(AT_DEST)
}

# As all binaries aren't PowerPC, they're always linked to system libraries
if { $env(AT_CROSS_BUILD) == "yes" } {
	printit "Skipping dynamic linking: this is a cross compiler\t\[SUCCESS\]"
	exit $ENOSYS
}

proc is_dynlink {file} {
	set file_info [ exec file $file ]

	if { [regexp "dynamically linked" $file_info] } {
		return 1
	} else {
		return 0
	}
}

proc has_broken_dynlink {file} {
	set ret 0

	if { [is_dynlink ${file}] } {
		if {[check_lib_dependencies $file]} {
			set ret 1
		}
	}
	return ${ret}
}

# Verify if the executables' interpreters have canonical path.
set executables [ exec find $at_dir -type f -perm /111 ]
foreach exe $executables {
	if { [is_dynlink ${exe}] } {
		set interp_info [exec readelf -l ${exe}]
		if { [regexp -line "interpreter: (.*)\]$" ${interp_info} match \
			  interpreter]} {
			set interpreter2 [file normalize ${interpreter}]
			if { ${interpreter} != ${interpreter2} } {
				fvtr_error "The interpreter of ${exe} is not \
canonical: ${interpreter}"
			}
		}
	}
}

set files [ exec find $at_dir -type f -perm /111 | \
		grep -Ev "$at_dir/(old/|compat/)?lib(64)?/ld\-" | \
		grep -Ev "\.debug$" ]

foreach file $files {
	if { [has_broken_dynlink $file] } {
		set rc 1
	}
}

#
# Important tests
#

# If Python is being distributed check if GDB is linked to libpython as there
# already have been reports of GDB not linking with the distributed Python.
if { [array names env -exact "AT_PYTHON_VER"] != "" } {
	if { ![regexp "^(\[0-9\]+\.\[0-9\]+)" $env(AT_PYTHON_VER) match \
		      py_ver] } {
		fvtr_error "Couldn't determine Python version from \
$env(AT_PYTHON_VER)."
	}
	if { ${py_ver} >= 3.4 } {
		set libname "libpython${py_ver}m"
	} else {
		set libname "libpython${py_ver}"
	}
	if {[check_lib_dependencies ${at_dir}/bin/gdb ${libname}]} {
		set rc 1
	}
}

if { $rc == 0 } {
	printit "Verifying dynamic linking:\t\t\t\t\[SUCCESS\]"
}
exit $rc
