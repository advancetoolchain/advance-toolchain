#! /usr/bin/expect
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set rc 0
source ./shared.exp

proc find_libs {libs} {
	global env
	global TARGET32
	global TARGET64
	global ERROR
	set rc 0

	foreach lib $libs {
		set lib_list [ exec find $env(AT_DEST) -name ${lib}.so ]
		set lib_found 1

		if { $TARGET32 } {
			printit "Checking if ${lib}.so is available for 32-bit..."
			if { [string first "/lib/" $lib_list] < 0 } {
				printit \
				    "Library ${lib}.so is not available for 32-bit." \
				    $ERROR
				set lib_found 0
			}
		}

		if { $TARGET64 } {
			printit "Checking if ${lib}.so is available for 64-bit..."
			if { [string first "/lib64/" $lib_list] < 0 } {
				printit \
				    "Library ${lib}.so is not available for 64-bit." \
				    $ERROR
				set lib_found 0
			}
		}

		if { $lib_found } {
			printit "${lib}.so check:\t\t\t\t\[SUCCESS\]"
		} else {
			set rc 1
		}
	}

	return $rc
}

if { [array names env -exact "AT_OPROFILE_VER"] == "" } {
	printit "Oprofile is not configured in the config file." $WARNING
	printit "Skipping..."
	exit $ENOSYS
}

# Check if libjvmti_oprofile.so and libjvmpi_oprofile.so are available for 32
# and 64 bits.
switch -regexp $env(AT_MAJOR_VERSION) {
	"5\..*" {
		# AT 5.0 supports jvmpi only (kernel limits?).
		set java_libs {"libjvmpi_oprofile"}
	}
	"6\..*|7\.0" {
		# AT 6.0 and 7.0 support both jvmti and jvmpi.
		set java_libs {"libjvmti_oprofile" "libjvmpi_oprofile"}
	}
	default {
		# AT 7.1 had to migrate to Java 7.1, which was the only one to
		# support ppc64le and supports jvmti.h only.
		set java_libs {"libjvmti_oprofile"}
	}
}
set rc [find_libs ${java_libs}]

set binaries {opannotate oparchive opgprof ophelp opimport \
	      opjitconv opreport}
switch -regexp $env(AT_OPROFILE_VER) {
	"^0\..*" {
		# OProfile 1.0.0 dropped support for opcontrol and oprofiled.
		lappend binaries opcontrol oprofiled
	}
	default {
		# As OProfile 1.0.0 dropped support for the legacy programs,
		# it should provide the new one.
		lappend binaries operf
	}
}
# Check if some executables are installed.
foreach exe ${binaries} {
	if { ![file exists $env(AT_DEST)/bin/${exe}] } {
		printit "file ${exe} isn't installed." $ERROR
		set rc 1
	}
}

# test that specified commands run successfully

proc test_this {command log} {
	global ERROR
	set rc 0
	set this_test [catch { eval exec ${command} >& ${log} } test_info]
	if { ${this_test} != 0 } {
		printit "problem with \"${command}\"." ${ERROR}
		set rc 1
	} else {
		printit "Test \"${command}\" passed test."
		exec rm ${log}
	}
	return $rc
}

# Define which word sizes are supported by this release.
set wordsize_l {}
if { ${TARGET32} } {
	lappend wordsize_l 32
}
if { ${TARGET64} } {
	lappend wordsize_l 64
}

cd ${FULLPATH}

set rc [expr {$rc || [test_this "ophelp" ${FULLPATH}/ophelp.log]}]

set test_source "${FULLPATH}/test.c"
set test_exec_base "${FULLPATH}/oprofile_test"
set CC [compiler_path]
set CFLAGS "-O2 -Wall"

foreach archsize ${wordsize_l} {
	set test_exec "${test_exec_base}-${archsize}"

	compile "${CC} -m${archsize} ${CFLAGS} ${test_source} -o ${test_exec}"

	set tool_test "ocount ${test_exec}"
	set rc [expr {$rc || [test_this ${tool_test} ${FULLPATH}/ocount-${archsize}.log]}]
	set tool_test "operf ${test_exec}"
	set rc [expr {$rc || [test_this ${tool_test} ${FULLPATH}/operf-${archsize}.log]}]
	set tool_test "opreport"
	set rc [expr {$rc || [test_this ${tool_test} ${FULLPATH}/opreport-${archsize}.log]}]
	set tool_test "opannotate --assembly"
	set rc [expr {$rc || [test_this ${tool_test} ${FULLPATH}/opannotate-${archsize}.log]}]

	exec rm -rf ${test_exec} ${FULLPATH}/oprofile_data
}

exit $rc
