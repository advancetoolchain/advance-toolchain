#! /usr/bin/expect
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This script tests if the content of all RPM/DEB packages were generated as
# expected. Thus, the code does only a string match verification, searching for
# specificÂ·directories and files inside all packages.
#
# For a complete package validation, try rpmlint and lintian:
# - https://github.com/rpm-software-management/rpmlint
# - https://lintian.debian.org/

source ./shared.exp

set at_dir $env(AT_DEST)
set rc 0

if { $env(AT_MAJOR_VERSION) < 8.0 } {
	printit "Skipping: prior to AT 8.0 the runtime package had some development files.\t\[SUCCESS\]"
	exit $ENOSYS
}

# This function calculates the total of debug files inside a list. All debug
# files should be located in lib/debug directory (for AT packages only).
#
# Parameters:
# file_list		List of files
#
# Return:
# number of files inside /lib/debug directory.
proc get_number_of_debug_files { file_list } {
	# filter isolates the debug symbol files
	return [regexp -all -line ".*/$::env(AT_DIR_NAME)/.*lib/debug/.*\[^/\]\$"\
		$file_list]
}

# This function counts the number of AT files in a list.
#
# Parameters:
# file_list		List of files
#
# Return:
# number of files found
proc get_number_of_files { file_list } {
	# filter isolates the AT files
	return [regexp -all -line ".*/$::env(AT_DIR_NAME)/.*\[^/\]\$" $file_list]
}

# This procedure opens an RPM package and returns a list with all file paths.
#
# Parameters:
# package_name		name of the package
#
# Return:
# a list with all files
proc get_rpm_files { package_name } {
	# Using the global scope ERROR variable
	global ERROR

	# Collect the RPM package file content
	set rpm_path $::env(AT_WD)/rpms/$::env(AT_HOST_ARCH)
	set error [catch {exec rpm -qpl ${rpm_path}/${package_name}} file_list]

	if { ${error} != 0 } {
		printit "Problem found when looking for ${package_name} content..."
		exit $ERROR
	}

	return ${file_list}
}

# This procedure opens an DEB package and returns a list with all file paths.
#
# Parameters:
# package_name		name of the package
#
# Return:
# a list with all files
proc get_deb_files { package_name } {
	# Using the global scope ERROR variable
	global ERROR

	# Collect the DEB package file content
	set deb_path $::env(AT_WD)/debs/
	set error [catch {exec dpkg -c ${deb_path}/${package_name} \
		| awk {{print $6;}}} file_list]

	if { ${error} != 0 } {
		printit "Problem found when looking for ${package_name} content..."
		exit $ERROR
	}

	return ${file_list}
}

# This procedure gets the package flavor (runtime, devel, and etc).
#
# Parameters:
# package_name		name of the package.
#
# Return:
# the package flavor.
proc get_pkg_flavor { package_name } {
	# Using the global scope ERROR variable
	global ERROR

	set prefix "at$::env(AT_MAJOR_VERSION)-"
	if { ! [string equal "$::env(AT_INTERNAL)" "none" ] } {
		append prefix "$::env(AT_INTERNAL)-"
	}

	set ver_rev "$::env(AT_MAJOR_VERSION)-$::env(AT_REVISION_NUMBER)"

	# Cross compiled packages have different name patterns so that flavor
	# should be parsed a bit different than native packages.
	if { [regexp ".*cross.*" ${package_name}] } {
		if { [regexp ".*-cross-common.*" ${package_name}] } {
			return "cross_common"
		}

		if { [regexp ".*-cross-ppc.*\[-_\]${ver_rev}" \
			     ${package_name}] } {
			return "cross"
		}

		if { [regexp ".*-cross-ppc.*-(\\w\+(-\\w\+)?)\[-_\]${ver_rev}" \
			${package_name} pkg_flavor] } {
			return "cross_${pkg_flavor}"
		} else {
			printit "Unabled to get the package flavor of: \
				${package_name}"
			exit $ERROR
		}
	}

	if { [regexp \
		"${prefix}?(\\w\+(-\\w\+)?)\[-_\]${ver_rev}" \
		${package_name} -> pkg_flavor] } {
                return ${pkg_flavor}
        } else {
		printit "Unabled to get the package flavor of: ${package_name}"
		exit $ERROR
	}
}

# This function tests following conditions for the package:
# - It was generated without debug files.
# - Its path has an AT folder inside.
# - It distributes only allowed files.
#
# Parameters:
# file_list		List of files
# package_name		Package name
#
# Return:
# 0 if success or 1 if the content is invalid.
proc test_at_pkgs { file_list package_name } {
	set all_files [get_number_of_files ${file_list}]
	set debug_files [get_number_of_debug_files ${file_list}]

	# All debug files have to be generated in a separate debuginfo package.
	if { ${all_files} == 0 || ${debug_files} > 0 } {
		printit "FAILED (Invalid package content)."
		return 1
	}

	# Following exclusion patterns are concated with logical OR.
	#

	# File patterns that shoud not be in the runtime package.
	set runtime_exclude [join {"(?:^.*/bin/([^epw]|p[^iy]|e[^a]).*$)" \
		"(?:^.*/sbin/([^l]|l[^d]).*$)" \
		"(?:^.*/include/(.*)$)" \
		"(?:^.*/share/info/(.*)$)" \
		"(?:^.*/pkgconfig/(.*)$)" \
		"(?:^.*(\\.a)$)"} "\|"]

	# File patterns that should not be in devel package.
	set devel_exclude [join {"(?:^.*/sbin/ldconfig$)"} "\|"]

	# File patterns that should be in devel package.
	set devel_include {"^.*\\.a$" \
		"^.*/bin/([^ep]|p[^iy]|e[^a]).*$" \
		"^.*/sbin/.*$" \
		"^.*/include/.*$" \
		"^.*/share/info/.*$" \
		"^.*/pkgconfig/.*$"}

	set pkg_flavor [get_pkg_flavor ${package_name}]
	# If there are exclusion patterns for the given package
	# then apply checks.
	if { [info exists ${pkg_flavor}_exclude] } {
		set regex [set ${pkg_flavor}_exclude]
		if { [regexp -line -- "${regex}" ${file_list} matched_str] } {
			printit "FAILED (File should not be in ${pkg_flavor}: \
				${matched_str})"
			return 1
		}
	}

	# It is time to check inclusion patterns for the given package,
	# then apply checks.
	if { [info exists ${pkg_flavor}_include] } {
		set regex_list [set ${pkg_flavor}_include]
		foreach regex ${regex_list} {
			if { ! [regexp -line -- "${regex}" ${file_list}] } {
				printit "FAILED (Missing following file \
					pattern in ${pkg_flavor}: ${regex}"
				return 1
			}
		}
	}
	printit "SUCCESS."
	return 0
}

# This function performs a simple check of the runtime-atX.X-compat package
# to validate its contents were generated as expected.
#
# This test validates the presence of the two lib paths to be correct at the
# proper previous Advance Toolchain path, as well as the presence of the init
# script to mount them in. This is a very simple script, but should avoid the
# pass of a bogus package.
#
# Parameters:
# file_list		List of files
#
# Return:
# returns 0 if SUCCESS or 1 if the content is invalid.
#
# TODO: This test must be reviewed when we began to generate
# runtime-atX.X-compat packages for DEB distros. Probably the file positions
# inside the package list will be different, so it'll surely need
# some adjustments
proc test_at_compat_pkg { file_list } {
	# Set global scope variables
	global ERROR

	# Find the previous version and prepare the filter
	set at_previous $::env(AT_PREVIOUS_VERSION)
	set at_dir_name [exec basename "$::env(AT_DEST)"]
	set prev_prefix [exec echo "$::env(AT_DEST)" | \
					sed "s|${at_dir_name}|at${at_previous}|"]
	set grep_filter "'|${prev_prefix}|'"
	# Look for presence of lib links entry
	set err [catch {exec echo ${file_list} | tail -n 2 | \
					grep -Eoc ${grep_filter} } found_links]
	if { ${err} != 0 } {
		printit "Problem found when looking for links..."
		exit $ERROR
	}
	# Look for presence of init script entry
	set err [catch {exec echo ${file_list} | head -n 1 | \
					grep -Eoc '|/etc/rc\.d/|'} found_confs]
	if { ${err} != 0 } {
		printit "Problem found when looking for config..."
		exit $ERROR
	}

	# checking if the list has debug files
	set total_debug [get_number_of_debug_files ${file_list}]

	# Validate their presence
	if { ${found_links} == 2 && ${found_confs} == 1 && ${total_debug} == 0 } {
		printit "SUCCESS."
		return 0
	}

	printit "FAILED (Bad contents)."
	return 1
}

# This function performs a simple check of the *-dbg_* / debuginfo packages
# to validate its contents were generated as expected.
#
# Parameters:
# file_list		List of files
#
# Return:
# 0 if success or 1 if the content is invalid.
proc test_debuginfo_pkgs { file_list } {
	# This test validates the presence of the debug files into the correct
	# paths (same path as the related binary file).
	set debug_files [get_number_of_debug_files ${file_list}]
	set all_files [get_number_of_files ${file_list}]

	# Validate its content
	# - The package should have all its files as symbol files to
	#   be correct.
	if { ${debug_files} == ${all_files} && ${debug_files} > 0 } {
		printit "SUCCESS."
		return 0
	}

	printit "FAILED (Bad contents)."
	return 1
}

# This function validates the content of all packages.
#
# Return:
# 0 if success or 1 if the content is invalid.
proc test_all_packages {} {
	set rc 0
	set ext [get_packaging_system]

	if { ${ext} == "rpm" } {
		printit "Testing the generated RPM packages..."
		set package_list [get_packages_list "rpm"]
		set get_pkg_files get_rpm_files
	} elseif { ${ext} == "deb" } {
		printit "Testing the generated DEB packages..."
		set package_list [get_packages_list "deb"]
		set get_pkg_files get_deb_files
	} else {
		printit "Unsupported package system..."
		exit $ENOSYS
	}

	# Iterate through the packages found
	foreach package ${package_list} {
		if { [string match *selinux* "${package}"] || \
			 [string match *golang* "${package}"] } {
			# TODO Implement a content validation for golang and selinux packages
			printitcont "Skipping ${package}..."
			continue
		}

		printitcont "Testing ${package} contents..."
		set file_list [${get_pkg_files} ${package}]

		# Isolate the runtime-atX.X-compat package to check
		if { [string match *-runtime-at*-compat-* "${package}"] } {
			if { [test_at_compat_pkg ${file_list}] } {
				set rc 1
			}
		} elseif { [string match *-dbg_* "${package}"] \
			|| [string match *-debuginfo-* "${package}"] } {
			if { [test_debuginfo_pkgs ${file_list}] } {
				set rc 1
			}
		} else {
			if { [test_at_pkgs ${file_list} ${package}] } {
				set rc 1
			}
		}
	}

	return ${rc}
}

# Check if it's time to check the packages generated.
#
# By now, we are only testing the packages generated (and not installed), this
# test may be extended to check the installed packages, but it should use a
# different set of checks yet to be defined
if {[info exists env(AT_WD)]} {
	if { [test_all_packages] == 0 } {
		printit "Package testing was:\t\t\t\t\[SUCCESS\]"
		exit 0
	}
} else {
	# By now, if the test is being run on an installed package system,
	# just bypass it.
	printit "Skipping: this test should be run on a compatible mode at the\
			build system.\t\[SUCCESS\]"
	exit $ENOSYS
}

exit 1
