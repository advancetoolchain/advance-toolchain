#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for compat 32/64 bits
# ============================================
#

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'


atcfg_posti_hacks() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	# Set the base library path
	libdir=${at_dest}/${base_libdir}
	# Find the proper glibc final libc filename
	libname=$(basename $(ls ${libdir}/libc{-[0-9]*,}.so))
	# Set the name of the loader to use based on bit size
	local ld_so=$(basename $(ls ${libdir}/ld${AT_BIT_SIZE%32}.so.[0-9]))
	# Replace ${libdir}/libc.so with a version compatible with binutils
	# built with the --with_sysroot option set to ${at_dest}
	[[ -e  ${libdir}/libc.so ]] && \
		mv -f ${libdir}/libc.so ${libdir}/libc.so.orig
	echo "/* GNU ld script"                                                > ${libdir}/libc.so
	echo "   Use the shared library, but some functions are only in"      >> ${libdir}/libc.so
	echo "   the static library, so try that secondarily."                >> ${libdir}/libc.so
	echo "   You will notice that the paths do not contain ${at_dest}."   >> ${libdir}/libc.so
	echo "   This is because the Advance Toolchain binutils uses"         >> ${libdir}/libc.so
	echo "   --with-sysroot which causes the linker to append ${at_dest}" >> ${libdir}/libc.so
	echo "   onto the paths found in this ld script.  */"                 >> ${libdir}/libc.so
	echo "GROUP ( libc.so.6 libc_nonshared.a AS_NEEDED ( ${ld_so} ) )"    >> ${libdir}/libc.so
	[[ -e  ${libdir}/libc.so.orig ]] && \
		rm ${libdir}/libc.so.orig
}


atcfg_pre_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	local base_sbindir=$(find_build_sbindir ${AT_BIT_SIZE})
	local base_libexecdir=$(find_build_libexecdir ${AT_BIT_SIZE})
	echo slibdir="${at_dest}/${base_libdir}"        >  ./configparms
	echo libdir="${at_dest}/${base_libdir}"         >> ./configparms
	echo bindir="${at_dest}/${base_bindir}"         >> ./configparms
	echo sbindir="${at_dest}/${base_sbindir}"       >> ./configparms
	echo libexecdir="${at_dest}/${base_libexecdir}" >> ./configparms
	echo rootsbindir="${at_dest}/${base_sbindir}"   >> ./configparms
	echo cross-compiling=no                         >> ./configparms
}


atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})

	PATH=${at_dest}/bin:${PATH} \
	AUTOCONF="${autoconf}" \
	CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
	CXX="${at_dest}/bin/g++ -m${AT_BIT_SIZE}" \
	CFLAGS="-g -O3 \
		${with_longdouble:+-mlong-double-128}" \
	CXXFLAGS="-g -O3" \
	${ATSRC_PACKAGE_WORK}/configure --build=${target} \
					--host=${base_target} \
					--prefix="${at_dest}" \
					--with-headers="${at_dest}/include" \
					--enable-add-ons \
					--with-__thread \
					--enable-shared \
					--enable-multi-arch \
					--without-gd \
					--without-selinux \
					--with-cpu=${build_load_arch} \
					--enable-kernel="${compat_kernel}" \
					--enable-lock-elision=yes
}


atcfg_make() {
	PATH=${at_dest}/bin:${PATH} ${SUB_MAKE}
}


atcfg_install() {
	PATH=${at_dest}/bin:${PATH} \
		${SUB_MAKE} install install_root="${install_place}"
}


atcfg_post_install() {
	set -e
	# Reuse time zone information available in the system.
	ln -s /etc/localtime ${install_transfer}/etc/localtime
	ln -s /usr/share/zoneinfo/ ${install_transfer}/share/zoneinfo
	# Compat only needs runtime functionality.
	rm -rf "${install_transfer}/include" \
	       "${install_transfer}/share/info" \
	       "${install_transfer}/var"
	# Remove development files.
	find "${install_transfer}/" \
	     -name '*.a' \
	     -o -name '*.o' \
	     -o -name '*.la' \
	     | xargs rm -vf
	# Removing the created ld.so.cache to avoid further problems.
	rm -rf "${install_transfer}/etc/ld.so.cache"
	# Move final required files to compat folder.
	mkdir -p "${install_transfer}/compat"
	find "${install_transfer}" -maxdepth 1 \
		! -path "${install_transfer}/compat" \
		! -path "${install_transfer}" \
		-execdir mv -v -t "${install_transfer}/compat" {} +
	set +e
}
