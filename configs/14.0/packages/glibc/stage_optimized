#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for CPU optimized 32/64 bits
# ===================================================
#

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# GLIBC BUILD HACKS
# =========================================================
# Required post install hacks (this one is run after the final install move)
atcfg_posti_hacks() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	# Set the base library path
	libdir=${at_dest}/${base_libdir}
	# Find the proper glibc final libc filename
	libname=$(basename $(ls ${libdir}/${AT_OPTIMIZE_CPU}/libc{-[0-9]*,}.so))
	local ld_so=$(basename $(ls ${libdir}/ld${AT_BIT_SIZE%32}.so.[0-9]))
	# Replace ${libdir}/${AT_OPTIMIZE_CPU}/libc.so with a version compatible with binutils
	# built with the --with_sysroot option set to ${at_dest}
	[[ -e ${libdir}/${AT_OPTIMIZE_CPU}/libc.so ]] && \
		mv -f ${libdir}/${AT_OPTIMIZE_CPU}/libc.so ${libdir}/${AT_OPTIMIZE_CPU}/libc.so.orig
	echo "/* GNU ld script"                                                > ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   Use the shared library, but some functions are only in"      >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   the static library, so try that secondarily."                >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   You will notice that the paths do not contain ${at_dest}."   >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   This is because the Advance Toolchain binutils uses"         >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   --with-sysroot which causes the linker to append ${at_dest}" >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "   onto the paths found in this ld script.  */"                 >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	echo "GROUP ( libc.so.6 libc_nonshared.a AS_NEEDED ( ${ld_so} ) )"     >> ${libdir}/${AT_OPTIMIZE_CPU}/libc.so
	[[ -e ${libdir}/${AT_OPTIMIZE_CPU}/libc.so.orig ]] && \
		rm ${libdir}/${AT_OPTIMIZE_CPU}/libc.so.orig
}


# ATCFG_CONFIGURE SETTINGS
# =========================================================
# Pre configure settings or commands to run
atcfg_pre_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	local base_sbindir=$(find_build_sbindir ${AT_BIT_SIZE})
	local base_libexecdir=$(find_build_libexecdir ${AT_BIT_SIZE})
	echo slibdir="${at_dest}/${base_libdir}"        >  ./configparms
	echo libdir="${at_dest}/${base_libdir}"         >> ./configparms
	echo bindir="${at_dest}/${base_bindir}"         >> ./configparms
	echo sbindir="${at_dest}/${base_sbindir}"       >> ./configparms
	echo libexecdir="${at_dest}/${base_libexecdir}" >> ./configparms
	echo rootsbindir="${at_dest}/${base_sbindir}"   >> ./configparms
	if [[ "${at_build_cpu}" == "${AT_OPTIMIZE_CPU}" ]]; then
		echo cross-compiling=no                     >> ./configparms
	else
		echo cross-compiling=yes                    >> ./configparms
	fi
}
# Configure command for native builds
atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})

	PATH=${at_dest}/bin:${PATH} \
	AUTOCONF="${autoconf}" \
	CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
	CXX="${at_dest}/bin/g++ -m${AT_BIT_SIZE}" \
	CFLAGS="-g -O3 \
		${with_longdouble:+-mlong-double-128} \
		-fcommon" \
	CXXFLAGS="-g -O3" \
	${ATSRC_PACKAGE_WORK}/configure --build=${target} \
					--host=${base_target} \
					--prefix="${at_dest}" \
					--with-headers="${at_dest}/include" \
					--enable-add-ons \
					--with-__thread \
					--enable-shared \
					--enable-multi-arch \
					--enable-experimental-malloc \
					--enable-obsolete-rpc \
					--without-gd \
					--without-selinux \
					--with-cpu=${AT_OPTIMIZE_CPU/ppc/} \
					--enable-kernel="${kernel}" \
					--enable-obsolete-rpc \
					--enable-lock-elision=yes
}


# ATCFG_MAKE SETTINGS
# =========================================================
# Make build command
atcfg_make() {
	PATH=${at_dest}/bin:${PATH} ${SUB_MAKE}
}


# ATCFG_INSTALL SETTINGS
# =========================================================
# Install build command
atcfg_install() {
	PATH=${at_dest}/bin:${PATH} ${SUB_MAKE} install install_root="${install_place}"
}
# Post install settings or commands to run
atcfg_post_install() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	# Remove unneeded install files
	find "${install_place}/${at_dest}" -type d -name "gconv" -print -execdir rm -rf {} +
	find "${install_place}/${at_dest}" -type d -name "audit" -print -execdir rm -rf {} +
	find "${install_place}/${at_dest}" -name "ld*.so.*" -print -delete
	find "${install_place}/${at_dest}" -name "ld*.so" -print -delete
	find "${install_place}/${at_dest}" -name "libdl*.so*" -print -delete
	find "${install_place}/${at_dest}" -name "libdl.a" -print -delete
	find "${install_place}/${at_dest}" -name "libmemusage.so.*" -print -delete
	# Save all libraries into a tar file
	pushd "${install_place}/${at_dest}/${base_libdir}"
	tar czf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" \
	    $(find . -name "*.so" -o -name "*.so.*" -o -name "*.a")
	popd
	# Remove all installed built files
	rm -rf "${install_place}/${at_dest}"
	# Create processor lib target
	mkdir -p "${install_place}/${at_dest}/${base_libdir}/${AT_OPTIMIZE_CPU}"
	# Place saved libs on created final target
	pushd "${install_place}/${at_dest}/${base_libdir}/${AT_OPTIMIZE_CPU}"
	tar xzf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz"
	popd
}
