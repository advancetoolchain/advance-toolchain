#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Kernel build parameters for stage 1
# ===================================
#

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# The kernel only supports build in the same directory of the source code'
ATCFG_BUILD_STAGE_T='link'

# Required pre build hacks
atcfg_pre_hacks() {
	# These directories are intended for native builds only.
	if [[ "${cross_build}" == "yes" ]]; then
		return 0
	fi

	# Preparing ${install_place}/${at_dest} folder structure
	if [[ ! -d ${install_place}/${at_dest}/include/linux ]]; then
		mkdir -p ${install_place}/${at_dest}/include/linux
		mkdir -p ${install_place}/${at_dest}/include/asm
		if [[ -n "${header_target}" ]]; then
			mkdir -p ${install_place}/${at_dest}/include/asm-${header_target}
		fi
		if [[ -n "${header_target64}" ]]; then
			mkdir -p ${install_place}/${at_dest}/include/asm-${header_target64}
		fi
		mkdir -p ${install_place}/${at_dest}/include/asm-generic
	fi
}

# Pre configure settings
atcfg_pre_configure() {
	if [[ "${cross_build}" == "yes" ]]; then
		return 0
	fi
	# Continue with native builds
	if [[ -e "/usr/include/sys/capability.h" ]]; then
		mkdir -p ${install_place}/${at_dest}/include/sys
		rsync -rptgoq --delete /usr/include/sys/capability.h ${install_place}/${at_dest}/include/sys
	fi
	# Make the headers available for the compat package
	if [[ ! -d ${install_transfer}/compat ]]; then
		mkdir -p ${install_transfer}/compat
	fi
	cp -rf ${install_transfer}/include \
	       ${install_transfer}/compat/
	if [[ -e "./headers" ]]; then
		rm -rf ./headers
	fi
}

# Configure command for build
atcfg_configure() {
	echo "No need for configure on kernel install headers"
}

# Make build command
atcfg_make() {
	echo "No need for make all on kernel install headers"
}

# Install command for native builds
atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		make headers_install ARCH=powerpc INSTALL_HDR_PATH=./headers
	else
		make headers_install ARCH=powerpc CROSS_COMPILE=${target}- \
		     INSTALL_HDR_PATH=${install_place}/${dest_cross}/usr
	fi
}

# Post install settings or commands to run
atcfg_post_install() {
	if [[ "${cross_build}" == "yes" ]]; then
		return 0
	fi
	# Continue with native build
	pushd ./headers
	for dir in $(ls -d ./include/*); do
		rsync -rptgoq --delete ${dir} \
			${install_place}/${at_dest}/include/
		if [[ ${?} -ne 0 ]]; then
			echo "rsync of system kernel headers in ${dir} to ${install_place}/${at_dest}/include/ failed!"
			exit 1
		fi
		rsync -rptgoq --delete ${dir} \
			${install_transfer}/compat/include/
		if [[ ${?} -ne 0 ]]; then
			echo "rsync of system kernel headers in ${dir} to ${install_transfer}/compat/include/ failed!"
			exit 1
		fi
	done
	cputable_h=$(find include -name cputable.h)
	if [[ -z ${cputable_h} ]]; then
		echo "Unable to find cputable.h in the kernel headers. Aborting!"
		exit 1
	fi
	cp ${cputable_h} \
		${install_place}/${at_dest}/include/asm-ppc/cputable.h
	cp ${cputable_h} \
		${install_place}/${at_dest}/include/asm-ppc64/cputable.h
	unset -v cputable_h
	sigcontext_h=$(find include -name sigcontext.h)
	if [[ -z ${sigcontext_h} ]]; then
		echo "Unable to find sigcontext.h in the kernel headers. Aborting!"
		exit 1
	fi
	cp ${sigcontext_h} \
		${install_place}/${at_dest}/include/asm-ppc/sigcontext.h
	cp ${sigcontext_h} \
		${install_place}/${at_dest}/include/asm-ppc64/sigcontext.h
	unset -v sigcontext_h
	popd
	rm -rf ./headers
}
