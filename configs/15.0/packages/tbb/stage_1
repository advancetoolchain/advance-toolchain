#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# TBB build parameters for stage 1 32/64 bits
# ==============================================
#

# Include some standard functions
source ${utilities}/bitsize_selection.sh

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in the source code directory
ATCFG_BUILD_STAGE_T='link'

atcfg_configure ()
{
	# No configure required for Thread Building Blocks
	echo "No configure to run."
}

atcfg_pre_make ()
{
	# Thread Building Blocks has some env var name clash with our
	# scripts.  Unset them now before build
	unset compiler
	unset target
}

atcfg_make ()
{
	local base_target=$(find_build_target ${AT_BIT_SIZE})

	# Set the AT's GCC as compiler.
	if [[ "${cross_build}" == 'yes' ]]; then
		local cc_path="${at_dest}/bin/${target64:-${target}}-gcc"
		local ccx_path="${at_dest}/bin/${target64:-${target}}-g++"
	else
		local cc_path="${at_dest}/bin/gcc"
		local ccx_path="${at_dest}/bin/g++"
	fi

	PATH=${at_dest}/bin:${PATH} \
	CONLY=${cc_path} \
	CPLUS=${ccx_path} \
	LDFLAGS="-m${AT_BIT_SIZE}" \
	CXXFLAGS="-m${AT_BIT_SIZE}" \
		${SUB_MAKE} arch=${base_target}
}

atcfg_make_check ()
{
	# Package testing not done on cross build
	if [[ "${cross_build}" == 'no' ]]; then
		PATH=${at_dest}/bin:${PATH} \
		LDFLAGS="-m${AT_BIT_SIZE}" \
		CXXFLAGS="-m${AT_BIT_SIZE}" \
			${SUB_MAKE} test
	fi
}

atcfg_pre_install ()
{
	if [[ "${cross_build}" == "yes" ]]; then
		install_dir="${install_transfer_cross}/usr"
	else
		install_dir="${install_transfer}"
	fi
	local libdir=$(find_build_libdir ${AT_BIT_SIZE})

	# Prepare the install folders for manual installation
	mkdir -p ${install_dir}/${libdir} \
		 ${install_dir}/include/tbb \
		 ${install_dir}/include/tbb/compat \
		 ${install_dir}/include/tbb/internal \
		 ${install_dir}/include/tbb/machine
}

atcfg_install ()
{
	local libdir=$(find_build_libdir ${AT_BIT_SIZE})

	for LIB in $(ls build/linux_powerpc*/*.so.*); do
		LIB_DEST=$(basename ${LIB} | sed "s/\.so\..*$/\.so/")
		install -m 755 ${LIB} \
			${install_dir}/${libdir}/$(basename ${LIB})
		pushd ${install_dir}/${libdir} && \
			ln -s $(basename ${LIB}) ${LIB_DEST} && popd
	done

	# Include files
	install -m 644 include/tbb/*.h \
		${install_dir}/include/tbb
	install -m 644 include/tbb/compat/* \
		${install_dir}/include/tbb/compat
	install -m 644 include/tbb/internal/* \
		${install_dir}/include/tbb/internal
	install -m 644 include/tbb/machine/* \
		${install_dir}/include/tbb/machine
}
