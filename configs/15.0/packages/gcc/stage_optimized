#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GCC build parameters for stage optimized
# ========================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'


atcfg_pre_configure() {
	# Avoid enabling cross compiling mode by default.
	cross=no
	# Check the need of a cross-compiler build
	if [[ "${at_build_cpu}" != "${AT_OPTIMIZE_CPU}" ]]; then
		cross=yes
	fi
	echo cross_compiling=${cross} >> ./configparms
	# Libraries require the previous variable to be passed in
	# target_configargs
	echo target_configargs=cross_compiling=${cross} >> ./configparms

	glibc=$(CC="${at_dest}/bin/${target}-gcc" \
		  ${utilities}/get_glibc_version.sh)
}


atcfg_configure() {
	PATH=${at_dest}/bin:${PATH} \
	CC="${at_dest}/bin/gcc" \
	CXX="${at_dest}/bin/g++" \
	AS="${at_dest}/bin/as" \
	LD="${at_dest}/bin/ld" \
	AR="${at_dest}/bin/ar" \
	NM="${at_dest}/bin/nm" \
	RANLIB="${at_dest}/bin/ranlib" \
	CFLAGS="-O2" \
	CXXFLAGS="-O2" \
	LDFLAGS="-L${at_dest}/lib64" \
	CFLAGS_FOR_TARGET="-O3" \
	CXXFLAGS_FOR_TARGET="-O3" \
	${ATSRC_PACKAGE_WORK}/configure \
		--build=${target64:-$target} \
		--host=${target64:-$target} \
		--target=${target64:-$target} \
		--cache-file=configparms \
		--prefix="${at_dest}" \
		${with_longdouble:+--with-long-double-128} \
		${with_dfp_standalone:+--enable-decimal-float} \
		${secure_plt:+--enable-secureplt} \
		${disable_multilib:+--disable-multilib} \
		--with-advance-toolchain=$(basename ${at_dest}) \
		--with-glibc-version=${glibc} \
		--with-local-prefix=${at_dest} \
		--enable-threads=posix \
		--enable-languages=${build_gcc_languages} \
		--enable-__cxa_atexit \
		--enable-shared \
		--enable-checking=release \
		--enable-gnu-indirect-function \
		--enable-lto \
		--enable-linker-build-id \
		--disable-bootstrap \
		--with-gmp-include="${at_dest}/include" \
		--with-gmp-lib="${at_dest}/lib64" \
		--with-mpfr-include="${at_dest}/include" \
		--with-mpfr-lib="${at_dest}/lib64" \
		--with-mpc-include="${at_dest}/include" \
		--with-mpc-lib="${at_dest}/lib64" \
		--without-ppl \
		--without-cloog \
		--without-libelf \
		--with-system-zlib \
		--with-host-libstdcxx="-L${at_dest}/lib64 -lstdc++ -lsupc++ -lgmp -lgmpxx -lm" \
		--with-cpu=${AT_OPTIMIZE_CPU/ppc/} \
		--with-tune=${AT_OPTIMIZE_CPU/ppc/}
}


atcfg_make() {
	# gcc_cv_have_tls=yes is required to avoid configure scripts testing if
	# TLS is available.  These tests try to execute programs compiled with
	# a -mcpu that is superior of the base value, which can cause a silent
	# illegal instruction error, forcing the script to assume that TLS is
	# not available.
	#
	# ssp_have_usable_vsnprintf=define is required to avoid configure
	# scripts from running programs compiled with a -mcpu that is superior
	# of the base value, which can cause a silent illegal instruction
	# error, forcing the script to assume that vsnprintf is not usable.
	#
	# libgo_cv_lib_setcontext_clobbers=no must be set for Go support builds
	# correctly (avoid running instructions for the optimized cpu at
	# configure time).
	PATH=${at_dest}/bin:${PATH} libgo_cv_lib_setcontext_clobbers_tls=no \
		${SUB_MAKE} all \
			    gcc_cv_have_tls=yes \
			    ssp_have_usable_vsnprintf=define
}


atcfg_install() {
	PATH=${at_dest}/bin:${PATH} \
		make -j1 DESTDIR=${install_place} install-target
}


atcfg_post_install() {
	# Remove 32-bit go libraries as it is not supported on go >= 1.4.2.
	if [[ -n "${target32}" ]]; then
		find "${install_place}/${at_dest}/lib/" -depth \
		     -name "libgo.*" -o -name "libgo*begin.*" \
			| xargs rm
		rm -rf ${install_place}/${at_dest}/lib/go/
	fi
	# Remove unneeded install files
	rm -rf ${install_place}/${at_dest}/lib/gcc
	find "${install_place}" -type f -name "*.o"  -print -delete
	find "${install_place}" -type f -name "*.a"  -print -delete
	find "${install_place}" -type f -name "*.la" -print -delete
	find "${install_place}" -type f -name "*.py" -print -delete
	# Save all libraries into a tar file
	pushd "${install_place}/${at_dest}/lib"
	local flist=$(find . -name "*.so" -o -name "*.so.*")
	[[ -n "${flist}" ]] && \
		tar czf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" \
			${flist}
	popd
	pushd "${install_place}/${at_dest}/lib64"
	local flist=$(find . -name "*.so" -o -name "*.so.*")
	[[ -n "${flist}" ]] && \
		tar czf "${install_place}/${AT_OPTIMIZE_CPU}_64.tar.gz" \
			${flist}
	popd
	# Remove all installed built files
	rm -rf "${install_place}/${at_dest}"
	# Create processor lib/lib64 targets
	mkdir -p "${install_place}/${at_dest}/lib/${AT_OPTIMIZE_CPU}"
	mkdir -p "${install_place}/${at_dest}/lib64/${AT_OPTIMIZE_CPU}"
	# Place saved libs on created final target
	pushd "${install_place}/${at_dest}/lib/${AT_OPTIMIZE_CPU}"
	[[ -e "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" ]] && \
		tar xzf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz"
	popd
	pushd "${install_place}/${at_dest}/lib64/${AT_OPTIMIZE_CPU}"
	[[ -e "${install_place}/${AT_OPTIMIZE_CPU}_64.tar.gz" ]] && \
		tar xzf "${install_place}/${AT_OPTIMIZE_CPU}_64.tar.gz"
	popd
	rm -f "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" \
	      "${install_place}/${AT_OPTIMIZE_CPU}_64.tar.gz"
}
