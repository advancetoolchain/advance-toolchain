#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# oProfile build parameters for stage 1 32 or 64 bits
# =============================================
#

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='link'

source ${AT_BASE}/scripts/utilities/bitsize_selection.sh

atcfg_pre_configure() {
	# Completely clean the build prior to any build
	if [[ -e "Makefile" ]]; then
		make distclean
	fi
	# Reconfigure the build with an autogen.sh
	sh ./autogen.sh || return 1

	# Export build variables required by java.sh script
	export pack_sys java_versions
	# Get Java path.
	java_path=$(${AT_BASE}/scripts/utilities/java.sh)
	if [[ ${?} -ne 0 ]]; then
		echo "Could not find a useful java."
		return 1
	fi
}

atcfg_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	PATH=${at_dest}/bin:${PATH} \
	CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
	CXX="${at_dest}/bin/g++ -m${AT_BIT_SIZE}" \
	CFLAGS="-g" \
	CXXFLAGS="-g" \
	${at_active_build}/configure --prefix="${at_dest}" \
		--libdir="${at_dest}/${base_libdir}" \
		--with-java="${java_path}" \
		--with-binutils="${at_dest}" \
		--with-binutils-libname=${base_libdir} \
		--disable-werror \
		--disable-gui \
		--with-kernel=/usr
}


atcfg_make() {
	PATH=${at_dest}/bin:${PATH} \
	${SUB_MAKE}
}


atcfg_install() {
	PATH=${at_dest}/bin:${PATH} \
		${SUB_MAKE} install DESTDIR=${install_place}
}


atcfg_post_install() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_target=$(find_build_target ${AT_BIT_SIZE})

	if [[ "${base_target}" == "${alternate_target}" ]]; then
		# Keep only the complement arch libraries when building for the
		# alternate target.  For the main target, we install everything.
		# Save all libraries into a tar file
		pushd "${install_place}/${at_dest}"
		tar czf "${install_place}/complement_arch_libs.tar.gz" \
			${base_libdir}
		popd
		# Remove all installed built files
		rm -rf "${install_place}/${at_dest}"
		# Create processor lib target
		mkdir -p "${install_place}/${at_dest}"
		# Place saved libs on created final target
		pushd "${install_place}/${at_dest}"
		tar xzf "${install_place}/complement_arch_libs.tar.gz"
		popd
	fi

	# Prepare the loader configuration in the main target only in order to
	# avoid concurrent access to the file.
	if [[ "${base_target}" == "${target}" ]]; then
		[[ ! -d ${install_transfer}/etc/ld.so.conf.d ]] && \
			mkdir -p ${install_transfer}/etc/ld.so.conf.d
		echo "${at_dest}/${base_libdir}/oprofile" > \
			${install_transfer}/etc/ld.so.conf.d/oprofile.conf
		# Provide an entry for the alternate target as well.
		if [[ -n "${alternate_target}" ]]; then
			if [[ "${base_libdir}" == "lib" ]]; then
				local alt_lib=lib64
			else
				local alt_lib=lib
			fi
			echo "${at_dest}/${alt_lib}/oprofile" >> \
			     ${install_transfer}/etc/ld.so.conf.d/oprofile.conf
		fi
	fi
}
