#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# OpenSSL build parameters for CPU optimized 32 or 64 bits
# =========================================
#

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='link'

source ${AT_BASE}/scripts/utilities/bitsize_selection.sh

atcfg_pre_configure() {
	PATH=${at_dest}/bin:${PATH} ./config --test-sanity
}


atcfg_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	local openssl_tgt=""

	# OpenSSL uses different architecture names
	case "${base_target}" in
		powerpc64-*)
			openssl_tgt="linux-ppc64"
			;;
		powerpc-*)
			# For linux-ppc builds, OpenSSL uses the default -m
			# value of the compiler.
			openssl_tgt="linux-ppc -m32"
			;;
		powerpc64le-*)
		  openssl_tgt="linux-ppc64le"
		  ;;
		*)
			echo "Unknown word size ${AT_BIT_SIZE}"
			return 1
			;;
	esac

	PATH=${at_dest}/bin:${PATH} \
	AR="${at_dest}/bin/ar" \
	AS="${at_dest}/bin/as" \
	CC="${at_dest}/bin/gcc" \
	CXX="${at_dest}/bin/g++" \
	LD="${at_dest}/bin/ld" \
	RANLIB="${at_dest}/bin/ranlib" \
	CFLAGS="-O3 -mcpu=${AT_OPTIMIZE_CPU/ppc/} -mtune=${AT_OPTIMIZE_CPU/ppc/} \
		-fpeel-loops -funroll-loops -ffast-math -ftree-vectorize" \
	./Configure ${openssl_tgt} \
		--prefix="${at_dest}" --libdir="${base_libdir}" \
		no-idea no-rc5 shared threads zlib-dynamic \
		-Wa,--noexecstack -g
}


# MAKE SETTINGS
# =========================================================
# Pre make settings or commands o run
atcfg_pre_make() {
	PATH=${at_dest}/bin:${PATH} make -j1 depend
}
atcfg_make() {
	PATH=${at_dest}/bin:${PATH} make -j1
}


# INSTALL SETTINGS
# =========================================================
# Install build command
atcfg_install() {
	PATH=${at_dest}/bin:${PATH} \
		make MANDIR="${at_dest}/share/man" \
		     DESTDIR=${install_place} -j1 install_sw
}
# Post install settings or commands to run
atcfg_post_install() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	# Save all libraries into a tar file
	pushd "${install_place}/${at_dest}/${base_libdir}"
	tar czf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" \
		$(find . -name "*.so" -o -name "*.so.*" -o -name "*.a" \
			 -o -name "*.pc") || return 1
	popd
	# Remove all installed built files
	rm -rf "${install_place}/${at_dest}"
	# Create processor lib target
	mkdir -p "${install_place}/${at_dest}/${base_libdir}/${AT_OPTIMIZE_CPU}"
	# Place saved libs on created final target
	pushd "${install_place}/${at_dest}/${base_libdir}/${AT_OPTIMIZE_CPU}"
	tar xzf "${install_place}/${AT_OPTIMIZE_CPU}.tar.gz" || return 1
	popd
}
