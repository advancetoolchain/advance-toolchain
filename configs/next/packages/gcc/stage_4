#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GCC build parameters for stage 4
# ================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# Conditional pre configure settings or commands to run
atcfg_pre_configure() {
	glibc=$(CC="${at_dest}/bin/${target}-gcc" \
		  ${utilities}/get_glibc_version.sh)
}

# ATCFG_CONFIGURE SETTINGS
# =========================================================
# Conditional configure command
atcfg_configure() {
	if [[ "${cross_build}" == "no" ]]; then
		# Configure command for native builds
		PATH=${at_dest}/bin:${PATH} \
		CC="${at_dest}/bin/gcc" \
		CFLAGS="-O2" \
		CXXFLAGS="-O2" \
		CFLAGS_FOR_TARGET="-O3 -g" \
		CXXFLAGS_FOR_TARGET="-O3 -g" \
		AS="${at_dest}/bin/as" \
		LD="${at_dest}/bin/ld" \
		LDFLAGS="-L${at_dest}/lib64" \
		${ATSRC_PACKAGE_WORK}/configure \
			--build=${target64:-$target} \
			--host=${target64:-$target} \
			--target=${target64:-$target} \
			--with-cpu=${default_cpu} \
			--prefix="${at_dest}" \
			${with_longdouble:+--with-long-double-128} \
			${with_dfp_standalone:+--enable-decimal-float} \
			${secure_plt:+--enable-secureplt} \
			${disable_multilib:+--disable-multilib} \
			--with-advance-toolchain=$(basename ${at_dest}) \
			--with-glibc-version=${glibc} \
			--with-local-prefix=${at_dest} \
			--enable-threads=posix \
			--enable-languages=${build_gcc_languages} \
			--enable-__cxa_atexit \
			--enable-shared \
			--enable-checking=release \
			--enable-lto \
			--enable-gnu-indirect-function \
			--enable-initfini-array \
			--enable-linker-build-id \
			--with-system-zlib \
			--with-gmp-include="${at_dest}/include" \
			--with-gmp-lib="${at_dest}/lib64" \
			--with-mpfr-include="${at_dest}/include" \
			--with-mpfr-lib="${at_dest}/lib64" \
			--with-mpc-include="${at_dest}/include" \
			--with-mpc-lib="${at_dest}/lib64" \
			--without-ppl \
			--without-cloog \
			--without-libelf \
			--with-host-libstdcxx="-L${at_dest}/lib64 -lstdc++ -lsupc++ -lgmp -lgmpxx -lm" \
			--with-cpu=${build_base_arch} \
			--with-tune=${build_optimization}
	else
		# Configure command for cross builds
		CC="${system_cc}" \
		CXX="${system_cxx}" \
		LD_FOR_TARGET="${at_dest}/bin/${target}-ld" \
		AS_FOR_TARGET="${at_dest}/bin/${target}-as" \
		AR_FOR_TARGET="${at_dest}/bin/${target}-ar" \
		RANLIB_FOR_TARGET="${at_dest}/bin/${target}-ranlib" \
		NM_FOR_TARGET="${at_dest}/bin/${target}-nm" \
		${ATSRC_PACKAGE_WORK}/configure \
			--build=${host} \
			--host=${host} \
			--target=${target64:-${target}} \
			--prefix="${at_dest}" \
			--enable-shared \
			${with_longdouble:+--with-long-double-128} \
			${with_dfp:+--enable-decimal-float} \
			${secure_plt:+--enable-secureplt} \
			${disable_multilib:+--disable-multilib} \
			--with-advance-toolchain=$(basename ${at_dest}) \
			--with-glibc-version=${glibc} \
			--with-local-prefix=${at_dest} \
			--enable-threads=posix \
			--enable-languages=${build_gcc_languages} \
			--enable-__cxa_atexit \
			--enable-lto \
			--enable-gnu-indirect-function \
			--enable-cross \
			--enable-initfini-array \
			--enable-linker-build-id \
			--disable-gotools \
			--disable-libcc1 \
			--disable-bootstrap \
			--with-as="${at_dest}/bin/${target}-as" \
			--with-ld="${at_dest}/bin/${target}-ld"  \
			--with-mpfr-include="${tmp_dir}/include" \
			--with-mpfr-lib="${tmp_dir}/lib" \
			--with-gmp-include="${tmp_dir}/include" \
			--with-gmp-lib="${tmp_dir}/lib" \
			--with-mpc-include="${tmp_dir}/include" \
			--with-mpc-lib="${tmp_dir}/lib" \
			--without-ppl \
			--without-cloog \
			--without-libelf \
			--with-sysroot="${dest_cross}" \
			--with-host-libstdcxx="-L${at_dest}/lib -L${tmp_dir}/lib -lstdc++ -lsupc++ -lgmp -lgmpxx -lm" \
			--with-cpu=${build_base_arch} \
			--with-tune=${build_optimization}
	fi
}


atcfg_pre_make() {
	if [[ "${cross_build}" == "no" ]]; then
		local lto_patch=gcc-6-lto.patch

		pushd ${ATSRC_PACKAGE_WORK}
		if [[ ! -r ${lto_patch} ]]; then
			echo "No gcc libstdc++ patch found!"
			exit 1
		fi
		# Ignore when the patch is already applied
		patch -sfR --dry-run -p1 -i ${lto_patch} > /dev/null \
			|| patch -p1 < ${lto_patch}
		if [[ ${?} -ne 0 ]]; then
			echo "Error applying gcc libstdc++ patch!"
			exit 1
		fi
		popd
	fi
}

# Make build command
atcfg_make() {
	if [[ "${cross_build}" == "no" ]]; then
		# Make build command
		PATH=${at_dest}/bin:${PATH} \
			${SUB_MAKE} STAGE1_CFLAGS="-g -O" profiledbootstrap
	else
		PATH=${at_dest}/bin:${PATH} \
			${SUB_MAKE} STAGE1_CFLAGS="-g -O"
	fi
}


# Pre install settings or commands to run
atcfg_pre_install() {
	# The gcc install recipe must be able to find the following folders
	# so that it can perform its tasks properly, as installing target
	# host binaries on cross builds. The binutils package will create
	# this folders on its install. As our installs are atomic, we need
	# to provide them before hand, so GCC finds it and its install
	# recipe can perform properly.
	[[ -d "${install_place}/${at_dest}/${target}/bin" ]] || \
		mkdir -p "${install_place}/${at_dest}/${target}/bin"
	[[ -d "${install_place}/${at_dest}/${target}/lib" ]] || \
		mkdir -p "${install_place}/${at_dest}/${target}/lib"
}

# Install build command
atcfg_install() {
	PATH=${at_dest}/bin:${PATH} \
	   make install -j1 DESTDIR=${install_place}
}

# Post install settings or commands to run
atcfg_post_install() {
	if [[ "${cross_build}" == "yes" ]]; then
		# Place some additional files for build process
		mkdir -p ${install_place}/${dest_cross}/usr/lib
		if [[ "${build_arch}" == ppc64* ]]; then
			# We need to manually copy these
			cp -d ${install_place}/${at_dest}/${target64}/lib/libgcc_s.so* ${install_place}/${dest_cross}/usr/lib/
			cp -d ${install_place}/${at_dest}/${target64}/lib/libstdc++.so* ${install_place}/${dest_cross}/usr/lib/
		else
			cp -d ${install_place}/${at_dest}/${target}/lib/libgcc_s.so* ${install_place}/${dest_cross}/usr/lib/
			cp -d ${install_place}/${at_dest}/${target}/lib/libstdc++.so* ${install_place}/${dest_cross}/usr/lib/
		fi
		# Remove 32-bit go libraries as it is not supported on go >= 1.4.2.
		if [[ -n "${target32}" ]]; then
			find "${install_place}/${at_dest}/${target64}/lib/" \
			     -depth -name "libgo.*" -o -name "libgo*begin.*" \
			     | xargs rm
			rm -rf ${install_place}/${at_dest}/${target64}/lib/go/
		fi
		# This was needed to fix the cross build which defaults to ${target64}
		# targets but now, we are assuming that every build should have the
		# triple shortcut installed, so we create gcc ${target32}-* symlinks
		pushd ${install_place}/${at_dest}/bin
		for CMD in c++ cpp g++ gcc gcov gfortran; do
			if [[ -x ${target64}-${CMD} ]] && \
			   [[ ! -f ${target32}-${CMD} ]]; then
				ln -sfn ${target64}-${CMD} ${target32}-${CMD}
			fi
		done
		popd
	else
		pushd ${install_place}/${at_dest}/bin
		# This is necessary for some applications to work
		if [[ ! -e "cc" ]]; then
			ln -s "gcc" "cc"
		fi
		popd
		# Remove unnecessary python scripts
		find "${install_place}/${at_dest}" -name "libstdc++.so.*-gdb.py" -print -delete
		# Remove 32-bit go libraries as it is not supported on go >= 1.4.2.
		if [[ -n "${target32}" ]]; then
			find "${install_place}/${at_dest}/lib/" -depth \
			     -name "libgo.*" -o -name "libgo*begin.*" \
			     | xargs rm
			rm -rf ${install_place}/${at_dest}/lib/go/
		fi
		set -e
		# Hack around to avoid ld.so.cache getting the libs from the
		# system as ldconfig puts platform based directories preceding
		# other directories.
		check_dirs=
		if [[ -n "${target32}" ]]; then
			check_dirs="${install_transfer}/lib"
		fi
		if [[ -n "${target64}" ]]; then
			if [[ -n "${target32}" ]]; then
				check_dirs="${install_transfer}/lib64 ${check_dirs}"
			else
				check_dirs="${install_transfer}/lib64"
			fi
		fi
		for dir in ${check_dirs}; do
			${AT_BASE}/scripts/utilities/create_lib_symlinks.sh \
				  "${dir}" "${dir}/${build_load_arch}"
		done
		set +e
	fi
}
