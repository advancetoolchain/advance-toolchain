#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Boost build parameters for stage 1 32/64 bits
# =========================================
#

# Include some standard functions
source ${utilities}/bitsize_selection.sh

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in the source code directory
ATCFG_BUILD_STAGE_T='link'

atcfg_pre_hacks ()
{
	local libdir=$(find_build_libdir ${AT_BIT_SIZE})

	if [[ "${cross_build}" == "yes" ]]; then
		# Set the AT's GCC as compiler.
		echo "using gcc : power : \
		     ${at_dest}/bin/${target64:-${target}}-g++ ;" \
		     > user-config.jam
		# Cross compiler fails on bzip2.
		B2_PARAM="-sNO_BZIP2=1"
		install_dir="${install_transfer_cross}/usr"
	else
		install_dir=${install_transfer}
		# The --user-config switch is used in cross builds to select
		# AT's gcc as compiler. On native builds, we provide an empty
		# user-config.jam file.
		touch user-config.jam
	fi

	if [[ "${AT_BIT_SIZE}" -eq "32" ]]; then
		# Clear the build and than apply a hack for SLES 11
		# SLES 11 doesnt provide a symlink named libbz2.so that points
		# to its 32-bit version, so the linker does not find it.
		mkdir -p ${at_active_build}/tmp
		local libbz2=$(find /lib /usr/lib -name "libbz2.so.1.*" 2> \
			/dev/null | head -n 1)
		if [[ -n "${libbz2}" ]]; then
			ln -s ${libbz2} ${at_active_build}/tmp/libbz2.so
		fi
		local linker_flags="linkflags=-L${at_active_build}/tmp"
	fi

	# The build of Boost is memory hungry.  The compilation of some files
	# uses too much RAM and we have to limit the amount of threads in order
	# to protect it against OOM.
	# 490 MiB / thread is known to be a safe value.
	local mem=$(free -m | awk '/Mem/ { print $2 }')
	THREADS=$(expr ${mem} / 900)
	# It doesn't make sense to run more threads than the amount of cores
	# available.
	[[ ${THREADS} -gt ${num_cores} ]] && THREADS=${num_cores}
	# Workaround a bug on b2
	# It segfaults when building Boost with more than 32 threads. We
	# prevent this limiting the number of threads to 32.
	[[ ${THREADS} -gt 32 ]] && THREADS=32
	B2_PARAM="${B2_PARAM} \
		  -j ${THREADS} \
		  -q \
		  --build-dir=${at_active_build}/build \
		  --stagedir=${at_active_build}/stage \
		  --libdir=${install_dir}/${libdir} \
		  --user-config=user-config.jam \
		  address-model=${AT_BIT_SIZE} \
		  cflags=-O3 \
		  cxxflags=-O3 \
		  link=static,shared \
		  ${linker_flags}"
}

atcfg_configure ()
{
	# Avoid using Python on 32-bit and cross compiler because AT only
	# builds it for 64 bits native.
	if [[ ${AT_BIT_SIZE} -eq 32 || "${cross_build}" == "yes" ]]; then
		local extra_parms="--without-libraries=python"
	else
		local python_exe=$(ls -d ${at_dest}/bin/python[0-9].[0-9])
		local extra_parms="--with-python=${python_exe} \
				   --with-python-root=${at_dest}"
	fi

	PATH=${at_dest}/bin:${PATH} \
		./bootstrap.sh --with-toolset=gcc --prefix="${install_dir}" \
			       ${extra_parms}
}

atcfg_make ()
{
	PATH=${at_dest}/bin:${PATH} ./b2 -a ${B2_PARAM}
}

atcfg_install ()
{
	PATH=${at_dest}/bin:${PATH} ./b2 ${B2_PARAM} install
}
