#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GCC build parameters for stage 2
# ================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'


# Required post install hacks (this one is run after the final install move)
atcfg_posti_hacks() {
	# Hack the static library to satisfy GLIBC build
	for LIB in $(find "${at_dest}/lib" -name libgcc.a); do
		[[ -e ${LIB%\.a}_eh.a ]] || ln -s libgcc.a ${LIB%\.a}_eh.a
		[[ -e ${LIB%\.a}_s.a ]] || ln -s libgcc.a ${LIB%\.a}_s.a
	done
}

atcfg_pre_hacks() {
	# Revision 224095 on gcc introduces the --with-advance-toolchain
	# option, which can be used to select the dynamic linker from the
	# Advance Toolchain, instead of the one provided by the system.
	# However, this switch assumes that the Advance Toolchain is installed
	# under /opt/atx.x, which is not necessarily true during advance
	# toolchain builds.
	#
	# The following lines patch the gcc source, in order to allow the use
	# of the --with-advance-toolchain during advance toolchain builds.
	echo ${destdir}
	sed -i -e "/\/opt\/\$with_advance_toolchain/s@/opt@${destdir}@" "${ATSRC_PACKAGE_WORK}/gcc/config.gcc"
}

# Pre configure settings or commands to run
atcfg_pre_configure() {
	cc_64="${system_cc}"
	cxx_64="${system_cxx}"
	libdir="${at_dest}/lib"
	if [[ "${cross_build}" == "no" ]]; then
		if [[ "${build_arch}" == ppc64* ]]; then
			if [[ "${default_compiler}" == "32" ]]; then
				cc_64="${gcc64}"
				cxx_64="${gpp64}"
			fi
			libdir="${at_dest}/lib64"
		fi
	fi
}

# Conditional configure command
atcfg_configure() {
	if [[ "${cross_build}" == "no" ]]; then
		# Configure command for native builds
		# TODO: Re-enable libsanitizer when GCC bug #81066 is fixed.
		CC="${cc_64}" \
		CXX="${cxx_64}" \
		CFLAGS="-O2" \
		CXXFLAGS="-O2" \
		AS="${at_dest}/bin/as" \
		LD="${at_dest}/bin/ld" \
		${ATSRC_PACKAGE_WORK}/configure \
			--build=${target64:-${target}} \
			--host=${target64:-${target}} \
			--target=${target64:-${target}} \
			--with-cpu=${default_cpu} \
			--prefix=${at_dest} \
			${with_longdouble:+--with-long-double-128} \
			${with_dfp_standalone:+--enable-decimal-float} \
			${secure_plt:+--enable-secureplt} \
			${disable_multilib:+--disable-multilib} \
			--with-advance-toolchain=$(basename ${at_dest}) \
			--with-local-prefix=${at_dest} \
			--enable-threads=posix \
			--enable-languages=c,c++ \
			--enable-__cxa_atexit \
			--enable-shared \
			--disable-checking \
			--disable-libmudflap \
			--disable-libssp \
			--disable-lto \
			--disable-libgomp \
			--disable-plugin \
			--disable-libsanitizer \
			--without-ppl \
			--without-cloog \
			--with-gmp-include="${at_dest}/include" \
			--with-gmp-lib=${libdir} \
			--with-mpfr-include="${at_dest}/include" \
			--with-mpfr-lib=${libdir} \
			--with-mpc-include="${at_dest}/include" \
			--with-mpc-lib=${libdir} \
			--with-as="${at_dest}/bin/as" \
			--with-ld="${at_dest}/bin/ld"
	else
		# Configure command for cross builds
		CC="${cc_64}" \
		CXX="${cxx_64}" \
		LD_FOR_TARGET="${at_dest}/bin/${target}-ld" \
		AS_FOR_TARGET="${at_dest}/bin/${target}-as" \
		AR_FOR_TARGET="${at_dest}/bin/${target}-ar" \
		NM_FOR_TARGET="${at_dest}/bin/${target}-nm" \
		RANLIB_FOR_TARGET="${at_dest}/bin/${target}-ranlib" \
		${ATSRC_PACKAGE_WORK}/configure \
			--build=${host} \
			--host=${host} \
			--target=${target64:-${target}} \
			--with-cpu=${default_cpu} \
			--prefix=${at_dest} \
			${with_longdouble:+--with-long-double-128} \
			${secure_plt:+--enable-secureplt} \
			${disable_multilib:+--disable-multilib} \
			--with-advance-toolchain=$(basename ${at_dest}) \
			--with-local-prefix=${at_dest} \
			--enable-languages=c \
			--enable-__cxa_atexit \
			--enable-threads=posix \
			--disable-libmudflap \
			--disable-libssp \
			--disable-libgomp \
			--disable-libatomic \
			--disable-libquadmath \
			--disable-lto \
			--disable-decimal-float \
			--disable-libcc1 \
			--disable-plugin \
			--with-mpfr-include="${tmp_dir}/include" \
			--with-mpfr-lib="${tmp_dir}/lib" \
			--with-gmp-include="${tmp_dir}/include" \
			--with-gmp-lib="${tmp_dir}/lib" \
			--with-mpc-include="${tmp_dir}/include" \
			--with-mpc-lib="${tmp_dir}/lib" \
			--without-ppl \
			--without-cloog \
			--with-host-libstdcxx="-L${libdir} -L${tmp_dir}/lib -lstdc++ -lsupc++ -lm -lgmp -lgmpxx -lmpfr -lmpc" \
			--with-build-sysroot="${dest_cross}" \
			--with-sysroot="${dest_cross}" \
			--with-native-system-header-dir="/usr/include"
	fi
}

# Make build command
atcfg_make() {
	# With -isystem we make sure that system's gcc (stage1) will recognize AT
	# headers as system headers and give them special treatment.
	${SUB_MAKE} STAGE1_CFLAGS="-isystem ${at_dest}/include" STAGE1_CXXFLAGS="-isystem ${at_dest}/include" all
}

# Pre install settings or commands to run
atcfg_pre_install() {
	# The gcc install recipe must be able to find the following folders
	# so that it can perform its tasks properly, as installing target
	# host binaries on cross builds. The binutils package will create
	# this folders on its install. As our installs are atomic, we need
	# to provide them before hand, so GCC finds it and its install
	# recipe can perform properly.
	[[ -d "${install_place}/${at_dest}/${target}/bin" ]] || \
		mkdir -p "${install_place}/${at_dest}/${target}/bin"
	[[ -d "${install_place}/${at_dest}/${target}/lib" ]] || \
		mkdir -p "${install_place}/${at_dest}/${target}/lib"
}

# Install build command
atcfg_install() {
	make install -j1 DESTDIR=${install_place}
}

# Post install settings or commands to run
atcfg_post_install() {
	# Fixes to cross build install
	if [[ "${cross_build}" == "yes" ]]; then
		# Create the required symlinks to install
		pushd ${install_place}/${at_dest}/bin
		if [[ ! -e ${target}-gcc ]]; then
			echo -e "#!/bin/bash\nexec ${at_dest}/bin/gcc \"${@}\"" > ${target}-gcc
			chmod a+x ${target}-gcc
		fi
		if [[ ! -e ${target}-g++ ]]; then
			echo -e "#!/bin/bash\nexec ${at_dest}/bin/g++ \"${@}\"" > ${target}-g++
			chmod a+x ${target}-g++
		fi
		if [[ ! -e ${target}-c++ ]]; then
			ln -f ${target}-g++ ${target}-c++
		fi
		popd
	fi
	# Remove unnecessary python scripts
	find "${install_place}/${at_dest}" -name "libstdc++.so.*-gdb.py" -print -delete
}
