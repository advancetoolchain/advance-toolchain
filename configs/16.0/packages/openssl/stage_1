#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

source ${AT_BASE}/scripts/utilities/bitsize_selection.sh

# OpenSSL build parameters for stage 1 32 or 64 bits
# =========================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='link'

atcfg_pre_configure() {
	# Prepare configure_build and configure_host variables, which are
	# passed as parameters to configure as --build and --host,
	# respectively.
	#
	# The variable configure_target and the parameter --target are not
	# required because this is not a Canadian Cross Compiler.
	#
	# The variable host is passed down to this file and holds the system
	# where advance toolchain is being built on.
	#
	# Native builds may have two targets, i.e.: 32 and 64 bits, regardless
	# of the word size of the building system. This could trick the
	# configure script into thinking that this is a cross build, when it is
	# not, e.g.:
	#   configure --build=powerpc64-linux-gnu --host=powerpc-linux-gnu
	#
	# Therefore, on native builds, we force configure_build to have the
	# same value as configure_host.
	configure_host=$(find_build_target ${AT_BIT_SIZE})
	if [[ "${cross_build}" == 'no' ]]; then
		configure_build=${configure_host}
	else
		configure_build=${host}
	fi

	# Prepare the directory variables: configure_prefix, configure_bindir,
	# configure_libdir, and configure_includedir, which are passed as
	# arguments to configure as --prefix, --bindir, --libdir, and
	# --includedir, respectively.
	#
	# On native builds, files are installed directly under the main prefix,
	# whereas on cross builds, a '/usr' suffix is added to it.
	if [[ "${cross_build}" == 'yes' ]]; then
		configure_prefix="${dest_cross}/usr"
	else
		configure_prefix="${at_dest}"
	fi
	# The bin and lib directories depend on the word size, e.g.
	# configure_bindir may be set to bin, bin32, or bin64.
	configure_bindir=${configure_prefix}/$(find_build_bindir ${AT_BIT_SIZE})
	configure_libdir=${configure_prefix}/$(find_build_libdir ${AT_BIT_SIZE})
	# The variable configure_includedir is not actually required, because
	# the default value provided by configure, i.e. ${prefix}/include, is
	# exactly what we want. However, we prepare this variable for
	# completeness purposes.
	configure_includedir="${configure_prefix}/include"

	# Important Note:
	#
	# The Configure script in the OpenSSL package is not generated by
	# autoconf and prefixes do not work the same way. In OpenSSL, the
	# parameter passed through the --libdir switch is appended to the value
	# passed through the --prefix switch, thus we must pass only the last
	# part of libdir.
	alternative_libdir=$(find_build_libdir ${AT_BIT_SIZE})


	PATH=${at_dest}/bin:${PATH} ./config --test-sanity
}

atcfg_configure() {
	# Select the prefixed compilation tools: gcc, g++, as, ld, ar, and
	# ranlib, so that they work on both native and cross build.
	configure_cc="${at_dest}/bin/${target64:-${target}}-gcc"
	configure_cxx="${at_dest}/bin/${target64:-${target}}-g++"
	configure_as="${at_dest}/bin/${target64:-${target}}-as"
	configure_ld="${at_dest}/bin/${target64:-${target}}-ld"
	configure_ar="${at_dest}/bin/${target64:-${target}}-ar"
	configure_ranlib="${at_dest}/bin/${target64:-${target}}-ranlib"

	# OpenSSL uses different architecture names
	local openssl_tgt=""
	case "${configure_host}" in
		powerpc64-*)
			openssl_tgt="linux-ppc64"
			;;
		powerpc-*)
			# For linux-ppc builds, OpenSSL uses the default -m
			# value of the compiler.
			openssl_tgt="linux-ppc -m32"
			;;
		powerpc64le-*)
		  openssl_tgt="linux-ppc64le"
		  ;;
		*)
			echo "Unknown word size ${AT_BIT_SIZE}"
			return 1
			;;
	esac

	PATH=${at_dest}/bin:${PATH} \
	CC="${configure_cc}" \
	CXX="${configure_cxx}" \
	AS="${configure_as}" \
	LD="${configure_ld}" \
	AR="${configure_ar}" \
	RANLIB="${configure_ranlib}" \
	./Configure ${openssl_tgt} \
		--prefix=${configure_prefix} \
		--libdir=${alternative_libdir} \
		no-idea no-rc5 shared threads zlib-dynamic \
		-Wa,--noexecstack -g
}


atcfg_pre_make() {
	PATH=${at_dest}/bin:${PATH} make -j1 depend
}
# Make build command
atcfg_make() {
	PATH=${at_dest}/bin:${PATH} make -j1
}

atcfg_make_check() {
	# Package testing not done for cross build.
	if [[ "${cross_build}" == 'no' ]]; then
		PATH=${at_dest}/bin:${PATH} make -j1 test
	fi
}


atcfg_install() {
	local install_arg="install_sw"
	if [[ "${AT_BIT_SIZE}" == "64" ]]; then
		install_arg="install"
	fi

	PATH=${at_dest}/bin:${PATH} \
	make MANDIR=${at_dest}/share/man \
	DESTDIR=${install_place} -j1 ${install_arg}
}

atcfg_post_install() {
	# In atcfg_pre_configure, we explained that the Configure script in
	# OpenSSL is not generated by autoconf. We also explained that, because
	# of that, we had to create an alternative variable,
	# alternative_libdir, by removing the value of configure_prefix from
	# the configure_libdir variable.
	#
	# Now, in order to ease the maintenance of this script, we switch back
	# to the default behavior, i.e., we reinstate the use of the variable
	# configure_libdir, which contains the value of configure_prefix

	# Save all libraries into a tar file
	if [[ "${build_arch}" == "ppc" ]]; then
		pushd "${install_place}/${configure_libdir}"
		tar czf "${install_place}/openssl_32.tar.gz" *
		popd
		# Remove all installed built files
		rm -rf "${install_place}/${configure_prefix}/*"
		mkdir "${install_place}/${configure_libdir}"
		# Place saved libs on created final target
		pushd "${install_place}/${configure_libdir}"
		tar xzf "${install_place}/openssl_32.tar.gz"
		popd
	fi
	set -e
	if [[ "${cross_build}" == 'no' ]]; then
                # Hack around to avoid ld.so.cache getting the libs from the
                # system as ldconfig puts platform based directories preceding
                # other directories.
		${AT_BASE}/scripts/utilities/create_lib_symlinks.sh \
			"${install_place}/${configure_libdir}/" \
			"${install_place}/${configure_libdir}/\
${build_load_arch}"
	fi
	set +e
}
